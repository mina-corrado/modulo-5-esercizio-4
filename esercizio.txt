Miglioriamo EpiBooks!

Riparti dal progetto precedente, oggi aggiungeremo una nuova funzionalità: permetteremo agli utenti di inserire delle recensioni sui libri! Ricorda, ogni recensione sarà pubblica e visibile a tutti gli altri 🙂

📚 API Docs:

Il tuo endpoint per tutto il CRUD si trova su:

https://striveschool-api.herokuapp.com/api/comments/

Ciò significa che puoi effettuare operazioni di GET, DELETE, POST e PUT.

🛑 IMPORTANT 🛑
Per utilizzare l’endpoint avrai bisogno di un header di autenticazione. Puoi ottenerne uno su https://strive.school/studentlogin

Una recensione è strutturata nel seguente modo:

{
“comment”: string
“rate”: string,
“elementId”: string
}

Dove:

comment è il testo della recensione
rate è un valore compreso tra 1 e 5
elementId è l’identificativo ASIN del libro

Esempio:

{
“comment”: “Un buon libro, anche se la trama non mi ha convinto fino in fondo”
“rate”: “3”,
“elementId”: “0316438960”
}

⚠️ ATTENZIONE ⚠️

Facendo un’operazione di GET su https://striveschool-api.herokuapp.com/api/comments/ riceverai TUTTE le recensioni presenti nel database. Probabilmente quello che a te interessa maggiormente sono le recensioni relative ad un singolo libro: puoi ottenerli aggiungendo l’ASIN del libro sul tuo endpoint:
https://striveschool-api.herokuapp.com/api/comments/:elementId

Esempio:

Una GET su https://striveschool-api.herokuapp.com/api/comments/0316438960 ti restituirà tutte le recensioni appartenenti ad un singolo libro.

TASKS:

1. Crea un componente CommentArea e incorporalo nel componente SingleBook. Quando un utente clicca su un SingleBook, il componente CommentArea deve venire renderizzato (suggerimento: puoi usare l’operatore &&).
2. CommentArea deve eseguire una fetch e salvare tutte le recensioni del libro all’interno del suo stato. Deve inoltre renderizzare altri due componenti dentro di sé: CommentList e AddComment.
3. CommentsList riceverà la lista di recensioni da CommentArea con una prop, e dovrà renderizzare la lista utilizzando un componente SingleComment.
4. AddComment conterrà un form per raccogliere il testo della recensione e la valutazione da 1 a 5; una volta raccolti i dati, tramite un pulsante verrà effettuata una chiamata POST per inviare la recensione alle API.

EXTRA: 5. A fianco di ogni recensione allega un pulsante per eliminarla: per farlo deve eseguire una richiesta di tipo DELETE su https://striveschool-api.herokuapp.com/api/comments/:commentId 6. Crea un componente Loading (con uno Spinner di react-bootstrap) che apparirà durante l’esecuzione di una richiesta alle API. 7. Crea un componente Error (con un Alert di react-bootstrap) che apparirà nel caso qualcosa andasse storto durante qualsiasi richiesta alle API.